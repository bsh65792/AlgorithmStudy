#include <iostream>
#include <queue>

using namespace std;

int t, m, n, k;

int map[51][51] = { 0, };
int visited[51][51] = { 0, };
int dy[4] = { -1, 0, 1, 0 };
int dx[4] = { 0, -1, 0, 1 };

void Resetmap(int n, int m) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			map[i][j] = 0;
			visited[i][j] = 0;
		}
	}
}

void DFS(int y, int x) {
	visited[y][x] = 1;

	for (int i = 0; i < 4; i++) {
		int ny = y + dy[i];
		int nx = x + dx[i];
		if (ny < 0 || nx < 0 || ny >= n || nx >= m) continue;

		if (visited[ny][nx] == 0 && map[ny][nx] == 1) {
			DFS(ny, nx);
		}
	}
}


int main() {
	ios_base::sync_with_stdio;
	queue<int> ans;
	cin >> t;
	
	for (int testCaseCnt = 0; testCaseCnt < t; testCaseCnt++) {
		int areaCnt = 0;
		cin >> n >> m >> k;
		Resetmap(n, m);

		for (int i = 0; i < k; i++) {
			int y, x;
			cin >> y >> x;
			map[y][x] = 1;
		}

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				if (map[i][j] == 1 && visited[i][j] == 0) {
					areaCnt++;
					DFS(i, j);
				}
			}
		}
		ans.push(areaCnt);

	}

	while (ans.size() > 0) {
		cout << ans.front() << "\n";
		ans.pop();
	}

	return 0;
}
