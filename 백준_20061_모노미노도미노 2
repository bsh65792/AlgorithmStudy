#include <iostream>
#include <vector>
#include <queue>

using namespace std;

void SetDot(vector<vector<int>>* map, int x);
void SetHorizontalBar(vector<vector<int>>* map, int firstX);
void SetVerticalBar(vector<vector<int>>* map, int underX);
void RotateDot(int* y, int* x);

vector<vector<int>> greenMap;
vector<vector<int>> blueMap;

int n;
int totalScore;


void SetBlockToGreenMap(int type, int y, int x) {
	if (type == 1) {
		SetDot(&greenMap, x);
	}
	else if (type == 2) {
		SetHorizontalBar(&greenMap, x);
	}
	else {
		SetVerticalBar(&greenMap, x);
	}
}

void SetBlockToBlueMap(int type, int y, int x) {
	//cout << "x의 값 : " << x << endl;
	//cout << "y의 값 : " << y << endl;
	////RotateDot(&y, &x);
	int yTemp = y;
	y = x;
	x = 3 - yTemp;
	//cout << "x의 값 : " << x << endl;
	//cout << "y의 값 : " << y << endl;

	if (type == 1) {
		//시계방향으로 90도 회전한 것과 같은 효과
		SetDot(&blueMap, x);
	}
	else if (type == 2) {
		SetVerticalBar(&blueMap, x);
	}
	else {
		
		SetHorizontalBar(&blueMap, x - 1);
	}
}

void RotateDot(int* y, int* x) {
	int xTemp = *x;
	*x = *y;
	*y = 3 - xTemp;
}

void SetDot(vector<vector<int>>* map, int x) {

	for (int i = (int)map->size() - 1; i >= 0; i--) {
		if (map->at(i).at(x) == 1) {
			if (i  >= (int)map->size() - 1) {
				vector<int> temp;
				switch (x) {
				case 0:
					temp = { 1, 0, 0, 0 };
					map->push_back(temp);
					break;
				case 1:
					temp = { 0, 1, 0, 0 };
					map->push_back(temp);
					break;
				case 2:
					temp = { 0, 0, 1, 0 };
					map->push_back(temp);
					break;
				case 3:
					temp = { 0, 0, 0, 1 };
					map->push_back(temp);
					break;
				default:
					break;
				}
				return;
			}
			else {
				map->at(i + 1).at(x) = 1;
				return;
			}
		}
		else if (map->at(i).at(x) == 0 && i == 0) {
			map->at(i).at(x) = 1;
			return;
		}
	}

	vector<int> temp;
	switch (x) {
	case 0:
		temp = { 1, 0, 0, 0 };
		map->push_back(temp);
		break;
	case 1:
		temp = { 0, 1, 0, 0 };
		map->push_back(temp);
		break;
	case 2:
		temp = { 0, 0, 1, 0 };
		map->push_back(temp);
		break;
	case 3:
		temp = { 0, 0, 0, 1 };
		map->push_back(temp);
		break;
	default:
		break;
	}
	return;

	
}

void SetHorizontalBar(vector<vector<int>>* map, int firstX) {
	for (int i = (int)map->size() - 1; i >= 0; i--) {
		if (map->at(i).at(firstX) == 1 || map->at(i).at(firstX + 1) == 1) {
			if (i + 1 >= (int)map->size()) {
				vector<int> temp;
				switch (firstX) {
				case 0:
					temp = { 1, 1, 0, 0 };
					map->push_back(temp);
					break;
				case 1:
					temp = { 0, 1, 1, 0 };
					map->push_back(temp);
					break;
				case 2:
					temp = { 0, 0, 1, 1 };
					map->push_back(temp);
					break;
				default:
					break;
				}
				return;
			}
			else {
				map->at(i + 1).at(firstX) = 1;
				map->at(i + 1).at(firstX + 1) = 1;
				return;
			}
		}
		else if (map->at(i).at(firstX) == 0 && map->at(i).at(firstX + 1) == 0 && i == 0) {
			map->at(i).at(firstX) = 1;
			map->at(i).at(firstX + 1) = 1;
			return;
		}
	}

	vector<int> temp;
	switch (firstX) {
	case 0:
		temp = { 1, 1, 0, 0 };
		map->push_back(temp);
		break;
	case 1:
		temp = { 0, 1, 1, 0 };
		map->push_back(temp);
		break;
	case 2:
		temp = { 0, 0, 1, 1 };
		map->push_back(temp);
		break;
	default:
		break;
	}
	return;


}

void SetVerticalBar(vector<vector<int>>* map, int underX) {
	SetDot(map, underX);
	SetDot(map, underX);
}

void GetScore(vector<vector<int>>* map) {
	queue<int> removeIndexQueue;
	for (int i = (int)map -> size() - 1; i >= 0; i--) {
		if (map -> at(i).at(0) == 1 && map->at(i).at(1) == 1 && map->at(i).at(2) == 1 && map->at(i).at(3) == 1) {
			removeIndexQueue.push(i);
			totalScore++;
		}
	}
	int queueSize = (int)removeIndexQueue.size();
	for (int i = 0; i < queueSize; i++) {
		int removeIndex = removeIndexQueue.front();
		removeIndexQueue.pop();
		map->erase(map->begin() + removeIndex);
	}

	while (map->size() > 4) {
		/*cout << "한번 발동!!" << endl;*/
		map->erase(map->begin());
	}
}

int GetTotalBlockCount(vector<vector<int>>* map) {
	int cnt = 0;
	for (int i = 0; i < (int)map -> size(); i++) {
		for (int j = 0; j < 4; j++) {
			if (map -> at(i).at(j) == 1) {
				cnt++;
			}
		}
	}
	
	return cnt;
}



int main() {
	totalScore = 0;
	int totalBlockCount = 0;

	cin.tie();
	cout.tie();

	cin >> n;

	int type, y, x;	//type 1: 점, 2 : 가로, 3 : 세로

	for (int i = 0; i < n; i++) {
		cin >> type >> y >> x;
		SetBlockToGreenMap(type, y, x);
		SetBlockToBlueMap(type, y, x);
		GetScore(&greenMap);
		GetScore(&blueMap);


	}

	totalBlockCount += GetTotalBlockCount(&greenMap);
	totalBlockCount += GetTotalBlockCount(&blueMap);

	cout << totalScore << endl;
	cout << totalBlockCount << endl;



	return 0;
}



